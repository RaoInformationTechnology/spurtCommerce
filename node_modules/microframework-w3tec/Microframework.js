"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MicroframeworkSettings_1 = require("./MicroframeworkSettings");
var MicroframeworkNotBootstrappedError_1 = require("./error/MicroframeworkNotBootstrappedError");
var MicroframeworkAsciiArtNotInstalledError_1 = require("./error/MicroframeworkAsciiArtNotInstalledError");
/**
 * Launches microframework.
 */
var Microframework = /** @class */ (function () {
    function Microframework() {
        // -------------------------------------------------------------------------
        // Private Properties
        // -------------------------------------------------------------------------
        /**
         * Stores configurations from all configuration files provided to microframework.
         */
        this.allConfiguration = {};
        /**
         * Stores all registered microframework loaders.
         */
        this.loaders = [];
    }
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    /**
     * Configs microframework.
     */
    Microframework.prototype.config = function (config) {
        var appRootDir = require("app-root-path").path;
        if (config instanceof String) {
            this.allConfiguration = require(appRootDir + "/" + config + ".json") || {};
            if (this.allConfiguration.microframework)
                this.frameworkConfig = this.allConfiguration.microframework;
        }
        else if (config instanceof Array) {
            if (config.length > 0) {
                this.allConfiguration = {};
                Object.assign.apply(Object, [this.allConfiguration].concat(config.map(function (conf) { return require(appRootDir + "/" + conf + ".json") || {}; })));
            }
        }
        else {
            this.frameworkConfig = config;
        }
        return this;
    };
    /**
     * Registers loader in the framework.
     */
    Microframework.prototype.registerLoader = function (loader) {
        this.loaders.push(loader);
        return this;
    };
    /**
     * Registers loaders in the framework.
     */
    Microframework.prototype.registerLoaders = function (loaders /* MicroframeworkModule[]|MicroframeworkModule[][] */) {
        var _this = this;
        (loaders || []).forEach(function (loader) {
            if (loader instanceof Array) {
                (_a = _this.loaders).push.apply(_a, loader);
            }
            else {
                _this.loaders.push(loader);
            }
            var _a;
        });
        return this;
    };
    /**
     * Bootstraps microframework and loads all loaders.
     */
    Microframework.prototype.bootstrap = function () {
        var _this = this;
        this.frameworkSettings = new MicroframeworkSettings_1.MicroframeworkSettings(this.allConfiguration);
        var bootstrapTime = +new Date();
        return this.generateLogo()
            .then(function (logo) {
            if (logo)
                console.log(logo);
            return _this.createBootstrapTimeout();
        }).then(function () {
            return _this.runInSequence(_this.loaders, function (loader) {
                var loaderResult = loader(_this.frameworkSettings);
                return loaderResult instanceof Promise ? loaderResult : Promise.resolve();
            });
        }).then(function () {
            if (_this.frameworkConfig && _this.frameworkConfig.showBootstrapTime)
                console.log("Application is up and running. It took " + (+new Date() - bootstrapTime - (_this.frameworkConfig.bootstrapTimeout || 0)) + " ms to bootstrap the app.");
            return _this;
        });
    };
    /**
     * Shutdowns microframework and everything loaders registered for shutdown.
     */
    Microframework.prototype.shutdown = function () {
        var _this = this;
        if (!this.frameworkSettings)
            throw new MicroframeworkNotBootstrappedError_1.MicroframeworkNotBootstrappedError();
        return this.runInSequence(this.frameworkSettings.getShutdownHandlers(), function (handler) {
            var handlerResult = handler();
            return handlerResult instanceof Promise ? handlerResult : Promise.resolve();
        }).then(function () { return _this; });
    };
    Object.defineProperty(Microframework.prototype, "settings", {
        /**
         * Returns microframework settings used and modified by bootstrapped loaders.
         * If framework was not bootstrapped yet, this accessor will throw an error.
         */
        get: function () {
            if (!this.frameworkSettings)
                throw new MicroframeworkNotBootstrappedError_1.MicroframeworkNotBootstrappedError();
            return this.frameworkSettings;
        },
        enumerable: true,
        configurable: true
    });
    // -------------------------------------------------------------------------
    // Private Methods
    // -------------------------------------------------------------------------
    /**
     * Runs given callback that returns promise for each item in the given collection in order.
     * Operations executed after each other, right after previous promise being resolved.
     */
    Microframework.prototype.runInSequence = function (collection, callback) {
        var results = [];
        return collection.reduce(function (promise, item) {
            return promise.then(function () {
                return callback(item);
            }).then(function (result) {
                results.push(result);
            });
        }, Promise.resolve()).then(function () {
            return results;
        });
    };
    /**
     * Prints the logo if it was set in the configuration.
     */
    Microframework.prototype.generateLogo = function () {
        var _this = this;
        return new Promise(function (ok, fail) {
            if (!_this.frameworkConfig || !_this.frameworkConfig.logo)
                return ok();
            try {
                var asciiArt = require("ascii-art");
                asciiArt.font(_this.frameworkConfig.logo, "Doom", function (logo) { return ok(logo.trim() + "\r\n"); });
            }
            catch (err) {
                fail(new MicroframeworkAsciiArtNotInstalledError_1.MicroframeworkAsciiArtNotInstalledError());
            }
        });
    };
    /**
     * Creates a promise which will resolve when bootstrap timeout is out.
     */
    Microframework.prototype.createBootstrapTimeout = function () {
        var _this = this;
        return new Promise(function (ok, fail) {
            if (!_this.frameworkConfig || !_this.frameworkConfig.bootstrapTimeout)
                return ok();
            setTimeout(ok, _this.frameworkConfig.bootstrapTimeout);
        });
    };
    return Microframework;
}());
exports.Microframework = Microframework;
//# sourceMappingURL=Microframework.js.map