{"version":3,"sources":["../../src/driver/DriverUtils.ts"],"names":[],"mappings":";;;AAAI;;EAED;AACH;IAAA;IAmEA,CAAC;IAjEG,4EAA4E;IAC5E,wBAAwB;IACxB,4EAA4E;IAE5E;;;OAGG;IACI,8BAAkB,GAAzB,UAA0B,OAAY,EAAE,YAAkC;QACtE,IAAI,OAAO,CAAC,GAAG,EAAE;YACb,IAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACvD,IAAI,gBAAgB,GAAQ;gBACxB,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;aAC/B,CAAC;YACF,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,EAAE;gBACrC,gBAAgB,CAAC,GAAG,GAAG,SAAS,CAAC,QAAQ,CAAC;aAC7C;YACD,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC;SACvD;QACD,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IAED,4EAA4E;IAC5E,yBAAyB;IACzB,4EAA4E;IAE5E;;OAEG;IACY,8BAAkB,GAAjC,UAAkC,GAAW;QACzC,IAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAM,YAAY,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvC,IAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QAC7C,IAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,IAAM,IAAI,GAAG,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QAC7E,IAAM,SAAS,GAAG,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAErF,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACzC,IAAM,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QACvD,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;QAEhD,IAAI,QAAQ,GAAG,mBAAmB,CAAC;QACnC,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAM,UAAU,GAAG,mBAAmB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACpD,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;YACnB,QAAQ,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YACrD,QAAQ,GAAG,mBAAmB,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;SACzD;QACK,IAAA,8CAAqC,EAApC,YAAI,EAAE,YAAI,CAA2B;QAE5C,OAAO;YACH,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,QAAQ;YAClB,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;YACvC,QAAQ,EAAE,SAAS,IAAI,SAAS;SACnC,CAAC;IACN,CAAC;IAEL,kBAAC;AAAD,CAnEA,AAmEC,IAAA;AAnEY,kCAAW","file":"DriverUtils.js","sourcesContent":["    /**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(options: any, buildOptions?: { useSid: boolean }): any {\n        if (options.url) {\n            const parsedUrl = this.parseConnectionUrl(options.url);\n            let urlDriverOptions: any = {\n                type: parsedUrl.type,\n                host: parsedUrl.host,\n                username: parsedUrl.username,\n                password: parsedUrl.password,\n                port: parsedUrl.port,\n                database: parsedUrl.database\n            };\n            if (buildOptions && buildOptions.useSid) {\n                urlDriverOptions.sid = parsedUrl.database;\n            }\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\n        const afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\n\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        const [host, port] = hostAndPort.split(\":\");\n\n        return {\n            type: type,\n            host: host,\n            username: username,\n            password: password,\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n    }\n\n}"],"sourceRoot":".."}