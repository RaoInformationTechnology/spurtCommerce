"use strict";
/**
 * Registry for all controllers and actions.
 */
var MetadataRegistry = (function () {
    function MetadataRegistry() {
        this._collectEventsHandlers = [];
        this._onMetadatas = [];
    }
    Object.defineProperty(MetadataRegistry.prototype, "container", {
        // -------------------------------------------------------------------------
        // Accessors
        // -------------------------------------------------------------------------
        /**
         * Sets a container that can be used in subscribers. This allows you to inject container services into
         * subscribers.
         */
        set: function (container) {
            this._container = container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetadataRegistry.prototype, "collectEventsHandlers", {
        /**
         * Gets all events handlers that registered here via annotations.
         */
        get: function () {
            var _this = this;
            return this._collectEventsHandlers
                .reduce(function (handlers, subscriber) {
                var instance = _this.instantiateClass(subscriber);
                if (instance.subscribedTo)
                    handlers.push(instance.subscribedTo());
                _this._onMetadatas
                    .filter(function (metadata) { return metadata.object.constructor === subscriber.object; })
                    .forEach(function (metadata) { return metadata.eventNames.map(function (eventName) {
                    handlers.push((_a = {}, _a[eventName] = function (data) { return instance[metadata.methodName](data); }, _a));
                    var _a;
                }); });
                return handlers;
            }, []);
        },
        enumerable: true,
        configurable: true
    });
    // -------------------------------------------------------------------------
    // Adder Methods
    // -------------------------------------------------------------------------
    MetadataRegistry.prototype.addSubscriberMetadata = function (metadata) {
        this._collectEventsHandlers.push(metadata);
    };
    MetadataRegistry.prototype.addOnMetadata = function (metadata) {
        this._onMetadatas.push(metadata);
    };
    // -------------------------------------------------------------------------
    // Private Methods
    // -------------------------------------------------------------------------
    MetadataRegistry.prototype.instantiateClass = function (subscriber) {
        if (!subscriber.instance) {
            var cls = subscriber.object;
            subscriber.instance = this._container ? this._container.get(cls) : new cls();
        }
        return subscriber.instance;
    };
    return MetadataRegistry;
}());
exports.MetadataRegistry = MetadataRegistry;
/**
 * Default action registry is used as singleton and can be used to storage all metadatas.
 */
exports.defaultMetadataRegistry = new MetadataRegistry();
//# sourceMappingURL=MetadataRegistry.js.map