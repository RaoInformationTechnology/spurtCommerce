"use strict";
var MetadataRegistry_1 = require("./MetadataRegistry");
var EventDispatcher = (function () {
    function EventDispatcher() {
        // -------------------------------------------------------------------------
        // Properties
        // -------------------------------------------------------------------------
        this.handlers = {};
    }
    EventDispatcher.prototype.remove = function (eventNameOrNamesOrCallback) {
        var _this = this;
        if (eventNameOrNamesOrCallback instanceof Array) {
            eventNameOrNamesOrCallback.forEach(function (eventName) { return _this.remove(eventName); });
        }
        else if (eventNameOrNamesOrCallback instanceof Function) {
            Object.keys(this.handlers).forEach(function (key) {
                _this.handlers[key]
                    .filter(function (handler) { return handler.callback === eventNameOrNamesOrCallback; })
                    .forEach(function (handler) { return _this.handlers[key].splice(_this.handlers[key].indexOf(handler), 1); });
            });
        }
        else if (typeof eventNameOrNamesOrCallback === "string") {
            this.handlers[eventNameOrNamesOrCallback] = [];
        }
    };
    EventDispatcher.prototype.detach = function (detachFrom, eventNameOrNamesOrCallback) {
        var _this = this;
        if (eventNameOrNamesOrCallback instanceof Array) {
            eventNameOrNamesOrCallback.forEach(function (eventName) { return _this.remove(eventName); });
        }
        else if (eventNameOrNamesOrCallback instanceof Function) {
            Object.keys(this.handlers).forEach(function (key) {
                _this.handlers[key]
                    .filter(function (handler) { return handler.callback === eventNameOrNamesOrCallback; })
                    .forEach(function (handler) { return _this.handlers[key].splice(_this.handlers[key].indexOf(handler), 1); });
            });
        }
        else if (typeof eventNameOrNamesOrCallback === "string") {
            var key_1 = eventNameOrNamesOrCallback;
            this.handlers[key_1]
                .filter(function (handler) { return handler.attachedTo === detachFrom; })
                .forEach(function (handler) { return _this.handlers[key_1].splice(_this.handlers[key_1].indexOf(handler), 1); });
        }
        else {
            Object.keys(this.handlers).forEach(function (key) {
                _this.handlers[key]
                    .filter(function (handler) { return handler.attachedTo === detachFrom; })
                    .forEach(function (handler) { return _this.handlers[key].splice(_this.handlers[key].indexOf(handler), 1); });
            });
        }
    };
    EventDispatcher.prototype.attach = function (attachTo, eventNameOrNames, callback) {
        var _this = this;
        var eventNames = [];
        if (eventNameOrNames instanceof Array) {
            eventNames = eventNameOrNames;
        }
        else {
            eventNames = [eventNameOrNames];
        }
        eventNames.forEach(function (eventName) {
            if (!_this.handlers[eventName])
                _this.handlers[eventName] = [];
            _this.handlers[eventName].push({ attachedTo: attachTo, callback: callback });
        });
    };
    EventDispatcher.prototype.on = function (eventNameOrNames, callback) {
        this.attach(undefined, eventNameOrNames, callback);
    };
    EventDispatcher.prototype.dispatch = function (eventNameOrNames, data) {
        var _this = this;
        var eventNames = [];
        if (eventNameOrNames instanceof Array) {
            eventNames = eventNameOrNames;
        }
        else if (typeof eventNameOrNames === "string") {
            eventNames = [eventNameOrNames];
        }
        eventNames.forEach(function (eventName) {
            if (_this.handlers[eventName])
                _this.handlers[eventName].forEach(function (handler) { return handler.callback(data); });
            MetadataRegistry_1.defaultMetadataRegistry
                .collectEventsHandlers
                .filter(function (handler) { return handler.hasOwnProperty(eventName); })
                .forEach(function (handler) { return handler[eventName](data); });
        });
    };
    return EventDispatcher;
}());
exports.EventDispatcher = EventDispatcher;
//# sourceMappingURL=EventDispatcher.js.map