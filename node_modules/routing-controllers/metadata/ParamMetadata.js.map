{"version":3,"sources":["../../src/metadata/ParamMetadata.ts"],"names":[],"mappings":";;AAOA;;GAEG;AACH;IAwFI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,uBAAY,cAA8B,EAAE,IAAuB;QAnDnE;;WAEG;QACH,eAAU,GAAW,EAAE,CAAC;QAExB;;WAEG;QACH,mBAAc,GAAY,KAAK,CAAC;QA4C5B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAErC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE9B,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAM,UAAU,GAAI,OAAe,CAAC,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/F,EAAE,CAAC,CAAC,OAAO,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7C,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,YAAY,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC9D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAEzD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;YACpD,CAAC;YACD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,YAAY,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC;QAC5G,CAAC;IACL,CAAC;IAEL,oBAAC;AAAD,CA/HA,AA+HC,IAAA;AA/HY,sCAAa","file":"ParamMetadata.js","sourcesContent":["import {ValidatorOptions} from \"class-validator\";\nimport {ActionMetadata} from \"./ActionMetadata\";\nimport {ParamMetadataArgs} from \"./args/ParamMetadataArgs\";\nimport {ParamType} from \"./types/ParamType\";\nimport {ClassTransformOptions} from \"class-transformer\";\nimport {Action} from \"../Action\";\n\n/**\n * Action Parameter metadata.\n */\nexport class ParamMetadata {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parameter's action.\n     */\n    actionMetadata: ActionMetadata;\n\n    /**\n     * Object on which's method's parameter this parameter is attached.\n     */\n    object: any;\n\n    /**\n     * Method on which's parameter is attached.\n     */\n    method: string;\n\n    /**\n     * Index (# number) of the parameter in the method signature.\n     */\n    index: number;\n\n    /**\n     * Parameter type.\n     */\n    type: ParamType;\n\n    /**\n     * Parameter name.\n     */\n    name: string;\n\n    /**\n     * Parameter target type.\n     */\n    targetType?: any;\n\n    /**\n     * Parameter target type's name in lowercase.\n     */\n    targetName: string = \"\";\n\n    /**\n     * Indicates if target type is an object.\n     */\n    isTargetObject: boolean = false;\n\n    /**\n     * Parameter target.\n     */\n    target: any;\n\n    /**\n     * Specifies if parameter should be parsed as json or not.\n     */\n    parse: boolean;\n\n    /**\n     * Indicates if this parameter is required or not\n     */\n    required: boolean;\n\n    /**\n     * Transforms the value.\n     */\n    transform: (action: Action, value?: any) => Promise<any>|any;\n\n    /**\n     * Additional parameter options.\n     * For example it can be uploader middleware options or body-parser middleware options.\n     */\n    extraOptions: any;\n\n    /**\n     * Class transform options used to perform plainToClass operation.\n     */\n    classTransform?: ClassTransformOptions;\n\n    /**\n     * If true, class-validator will be used to validate param object.\n     * If validation options are given then it means validation will be applied (is true).\n     */\n    validate?: boolean|ValidatorOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(actionMetadata: ActionMetadata, args: ParamMetadataArgs) {\n        this.actionMetadata = actionMetadata;\n\n        this.target = args.object.constructor;\n        this.method = args.method;\n        this.extraOptions = args.extraOptions;\n        this.index = args.index;\n        this.type = args.type;\n        this.name = args.name;\n        this.parse = args.parse;\n        this.required = args.required;\n        this.transform = args.transform;\n        this.classTransform = args.classTransform;\n        this.validate = args.validate;\n        \n        if (args.explicitType) {\n            this.targetType = args.explicitType;\n        } else {\n            const ParamTypes = (Reflect as any).getMetadata(\"design:paramtypes\", args.object, args.method);\n            if (typeof ParamTypes !== \"undefined\") {\n                this.targetType = ParamTypes[args.index];\n            }\n        }\n\n        if (this.targetType) {\n            if (this.targetType instanceof Function && this.targetType.name) {\n                this.targetName = this.targetType.name.toLowerCase();\n\n            } else if (typeof this.targetType === \"string\") {\n                this.targetName = this.targetType.toLowerCase();\n            }\n            this.isTargetObject = this.targetType instanceof Function || this.targetType.toLowerCase() === \"object\";\n        }\n    }\n\n}\n"],"sourceRoot":".."}