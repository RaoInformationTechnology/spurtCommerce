{"version":3,"sources":["../../src/metadata/ControllerMetadata.ts"],"names":[],"mappings":";;AAGA,0CAA8C;AAI9C;;GAEG;AACH;IA8CI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,4BAAY,IAA4B;QACpC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,CAAC;IASD,sBAAI,wCAAQ;QAPZ,4EAA4E;QAC5E,YAAY;QACZ,4EAA4E;QAE5E;;WAEG;aACH;YACI,MAAM,CAAC,4BAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;;;OAAA;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACH,kCAAK,GAAL,UAAM,gBAA2C;QAC7C,IAAM,iBAAiB,GAAG,gBAAgB,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,IAAI,KAAK,YAAY,IAAI,CAAC,OAAO,CAAC,MAAM,EAAhD,CAAgD,CAAC,CAAC;QAC7G,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,iBAAiB,CAAC;QAC5C,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,iBAAiB,IAAI,iBAAiB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3F,CAAC;IAEL,yBAAC;AAAD,CAjFA,AAiFC,IAAA;AAjFY,gDAAkB","file":"ControllerMetadata.js","sourcesContent":["import {ActionMetadata} from \"./ActionMetadata\";\nimport {ControllerMetadataArgs} from \"./args/ControllerMetadataArgs\";\nimport {UseMetadata} from \"./UseMetadata\";\nimport {getFromContainer} from \"../container\";\nimport {ResponseHandlerMetadata} from \"./ResponseHandleMetadata\";\nimport {InterceptorMetadata} from \"./InterceptorMetadata\";\n\n/**\n * Controller metadata.\n */\nexport class ControllerMetadata {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Controller actions.\n     */\n    actions: ActionMetadata[];\n\n    /**\n     * Indicates object which is used by this controller.\n     */\n    target: Function;\n\n    /**\n     * Base route for all actions registered in this controller.\n     */\n    route: string;\n\n    /**\n     * Controller type. Can be default or json-typed. Json-typed controllers operate with json requests and responses.\n     */\n    type: \"default\"|\"json\";\n\n    /**\n     * Middleware \"use\"-s applied to a whole controller.\n     */\n    uses: UseMetadata[];\n\n    /**\n     * Middleware \"use\"-s applied to a whole controller.\n     */\n    interceptors: InterceptorMetadata[];\n\n    /**\n     * Indicates if this action uses Authorized decorator.\n     */\n    isAuthorizedUsed: boolean;\n\n    /**\n     * Roles set by @Authorized decorator.\n     */\n    authorizedRoles: any[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    \n    constructor(args: ControllerMetadataArgs) {\n        this.target = args.target;\n        this.route = args.route;\n        this.type = args.type;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets instance of the controller.\n     */\n    get instance(): any {\n        return getFromContainer(this.target);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds everything controller metadata needs.\n     * Controller metadata should be used only after its build.\n     */\n    build(responseHandlers: ResponseHandlerMetadata[]) {\n        const authorizedHandler = responseHandlers.find(handler => handler.type === \"authorized\" && !handler.method);\n        this.isAuthorizedUsed = !!authorizedHandler;\n        this.authorizedRoles = [].concat((authorizedHandler && authorizedHandler.value) || []);\n    }\n\n}"],"sourceRoot":".."}