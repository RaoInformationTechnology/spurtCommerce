{"version":3,"sources":["../../src/metadata/ActionMetadata.ts"],"names":[],"mappings":"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","file":"ActionMetadata.js","sourcesContent":["import {Action} from \"../Action\";\nimport {ActionMetadataArgs} from \"./args/ActionMetadataArgs\";\nimport {ActionType} from \"./types/ActionType\";\nimport {ClassTransformOptions} from \"class-transformer\";\nimport {ControllerMetadata} from \"./ControllerMetadata\";\nimport {InterceptorMetadata} from \"./InterceptorMetadata\";\nimport {ParamMetadata} from \"./ParamMetadata\";\nimport {ResponseHandlerMetadata} from \"./ResponseHandleMetadata\";\nimport { RoutingControllersOptions } from \"../RoutingControllersOptions\";\nimport {UseMetadata} from \"./UseMetadata\";\n\n/**\n * Action metadata.\n */\nexport class ActionMetadata {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Action's controller.\n     */\n    controllerMetadata: ControllerMetadata;\n\n    /**\n     * Action's parameters.\n     */\n    params: ParamMetadata[];\n\n    /**\n     * Action's use metadatas.\n     */\n    uses: UseMetadata[];\n\n    /**\n     * Action's use interceptors.\n     */\n    interceptors: InterceptorMetadata[];\n\n    /**\n     * Class on which's method this action is attached.\n     */\n    target: Function;\n\n    /**\n     * Object's method that will be executed on this action.\n     */\n    method: string;\n\n    /**\n     * Action type represents http method used for the registered route. Can be one of the value defined in ActionTypes\n     * class.\n     */\n    type: ActionType;\n\n    /**\n     * Route to be registered for the action.\n     */\n    route: string | RegExp;\n\n    /**\n     * Full route to this action (includes controller base route).\n     */\n    fullRoute: string | RegExp;\n\n    /**\n     * Indicates if this action uses Body.\n     */\n    isBodyUsed: boolean;\n\n    /**\n     * Indicates if this action uses Uploaded File.\n     */\n    isFileUsed: boolean;\n\n    /**\n     * Indicates if this action uses Uploaded Files.\n     */\n    isFilesUsed: boolean;\n\n    /**\n     * Indicates if controller of this action is json-typed.\n     */\n    isJsonTyped: boolean;\n\n    /**\n     * Indicates if this action uses Authorized decorator.\n     */\n    isAuthorizedUsed: boolean;\n\n    /**\n     * Class-transformer options for the action response content.\n     */\n    responseClassTransformOptions: ClassTransformOptions;\n\n    /**\n     * Http code to be used on undefined action returned content.\n     */\n    undefinedResultCode: number | Function;\n\n    /**\n     * Http code to be used on null action returned content.\n     */\n    nullResultCode: number | Function;\n\n    /**\n     * Http code to be set on successful response.\n     */\n    successHttpCode: number;\n\n    /**\n     * Specifies redirection url for this action.\n     */\n    redirect: string;\n\n    /**\n     * Rendered template to be used for this controller action.\n     */\n    renderedTemplate: string;\n\n    /**\n     * Response headers to be set.\n     */\n    headers: { [name: string]: any };\n\n    /**\n     * Extra options used by @Body decorator.\n     */\n    bodyExtraOptions: any;\n\n    /**\n     * Roles set by @Authorized decorator.\n     */\n    authorizedRoles: any[];\n\n    /**\n     * Params to be appended to the method call.\n     */\n    appendParams?: (action: Action) => any[];\n\n    /**\n     * Special function that will be called instead of orignal method of the target.\n     */\n    methodOverride?: (actionMetadata: ActionMetadata, action: Action, params: any[]) => Promise<any> | any;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(controllerMetadata: ControllerMetadata, args: ActionMetadataArgs, private options: RoutingControllersOptions) {\n        this.controllerMetadata = controllerMetadata;\n        this.route = args.route;\n        this.target = args.target;\n        this.method = args.method;\n        this.type = args.type;\n        this.appendParams = args.appendParams;\n        this.methodOverride = args.methodOverride;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds everything action metadata needs.\n     * Action metadata can be used only after its build.\n     */\n    build(responseHandlers: ResponseHandlerMetadata[]) {\n        const classTransformerResponseHandler = responseHandlers.find(handler => handler.type === \"response-class-transform-options\");\n        const undefinedResultHandler = responseHandlers.find(handler => handler.type === \"on-undefined\");\n        const nullResultHandler = responseHandlers.find(handler => handler.type === \"on-null\");\n        const successCodeHandler = responseHandlers.find(handler => handler.type === \"success-code\");\n        const redirectHandler = responseHandlers.find(handler => handler.type === \"redirect\");\n        const renderedTemplateHandler = responseHandlers.find(handler => handler.type === \"rendered-template\");\n        const authorizedHandler = responseHandlers.find(handler => handler.type === \"authorized\");\n        const contentTypeHandler = responseHandlers.find(handler => handler.type === \"content-type\");\n        const bodyParam = this.params.find(param => param.type === \"body\");\n\n        if (classTransformerResponseHandler)\n            this.responseClassTransformOptions = classTransformerResponseHandler.value;\n        \n        this.undefinedResultCode = undefinedResultHandler\n            ? undefinedResultHandler.value\n            : this.options.defaults && this.options.defaults.undefinedResultCode;\n        \n        this.nullResultCode = nullResultHandler\n            ? nullResultHandler.value\n            : this.options.defaults && this.options.defaults.nullResultCode;\n        \n        if (successCodeHandler)\n            this.successHttpCode = successCodeHandler.value;\n        if (redirectHandler)\n            this.redirect = redirectHandler.value;\n        if (renderedTemplateHandler)\n            this.renderedTemplate = renderedTemplateHandler.value;\n\n        this.bodyExtraOptions = bodyParam ? bodyParam.extraOptions : undefined;\n        this.isBodyUsed = !!this.params.find(param => param.type === \"body\" || param.type === \"body-param\");\n        this.isFilesUsed = !!this.params.find(param => param.type === \"files\");\n        this.isFileUsed = !!this.params.find(param => param.type === \"file\");\n        this.isJsonTyped = (contentTypeHandler !== undefined \n            ? /json/.test(contentTypeHandler.value)\n            : this.controllerMetadata.type === \"json\"\n        );\n        this.fullRoute = this.buildFullRoute();\n        this.headers = this.buildHeaders(responseHandlers);\n\n        this.isAuthorizedUsed = this.controllerMetadata.isAuthorizedUsed || !!authorizedHandler;\n        this.authorizedRoles = (this.controllerMetadata.authorizedRoles || []).concat((authorizedHandler && authorizedHandler.value) || []);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds full action route.\n     */\n    private buildFullRoute(): string | RegExp {\n        if (this.route instanceof RegExp) {\n            if (this.controllerMetadata.route) {\n                return ActionMetadata.appendBaseRoute(this.controllerMetadata.route, this.route);\n            }\n            return this.route;\n        }\n\n        let path: string = \"\";\n        if (this.controllerMetadata.route) path += this.controllerMetadata.route;\n        if (this.route && typeof this.route === \"string\") path += this.route;\n        return path;\n    }\n\n    /**\n     * Builds action response headers.\n     */\n    private buildHeaders(responseHandlers: ResponseHandlerMetadata[]) {\n        const contentTypeHandler = responseHandlers.find(handler => handler.type === \"content-type\");\n        const locationHandler = responseHandlers.find(handler => handler.type === \"location\");\n\n        const headers: { [name: string]: string } = {};\n        if (locationHandler)\n            headers[\"Location\"] = locationHandler.value;\n\n        if (contentTypeHandler)\n            headers[\"Content-type\"] = contentTypeHandler.value;\n\n        const headerHandlers = responseHandlers.filter(handler => handler.type === \"header\");\n        if (headerHandlers)\n            headerHandlers.map(handler => headers[handler.value] = handler.secondaryValue);\n\n        return headers;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Calls action method.\n     * Action method is an action defined in a user controller.\n     */\n    callMethod(params: any[]) {\n        const controllerInstance = this.controllerMetadata.instance;\n        return controllerInstance[this.method].apply(controllerInstance, params);\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Appends base route to a given regexp route.\n     */\n    static appendBaseRoute(baseRoute: string, route: RegExp|string) {\n        const prefix = `${baseRoute.length > 0 && baseRoute.indexOf(\"/\") < 0 ? \"/\" : \"\"}${baseRoute}`;\n        if (typeof route === \"string\")\n            return `${prefix}${route}`;\n\n        if (!baseRoute || baseRoute === \"\") return route;\n\n        const fullPath = `^${prefix}${route.toString().substr(1)}?$`;\n        \n        return new RegExp(fullPath, route.flags);\n    }\n\n}"],"sourceRoot":".."}