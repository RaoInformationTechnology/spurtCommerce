{"version":3,"sources":["../../src/util/runInSequence.ts"],"names":[],"mappings":";;AAAA;;;GAGG;AACH,uBAAoC,UAAe,EAAE,QAAiC;IAClF,IAAM,OAAO,GAAQ,EAAE,CAAC;IACxB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,IAAI;QACnC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;YAChB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;YACV,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC;QACvB,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC,CAAC,CAAC;AACP,CAAC;AAXD,sCAWC","file":"runInSequence.js","sourcesContent":["/**\n * Runs given callback that returns promise for each item in the given collection in order.\n * Operations executed after each other, right after previous promise being resolved.\n */\nexport function runInSequence<T, U>(collection: T[], callback: (item: T) => Promise<U>): Promise<U[]> {\n    const results: U[] = [];\n    return collection.reduce((promise, item) => {\n        return promise.then(() => {\n            return callback(item);\n        }).then(result => {\n            results.push(result);\n        });\n    }, Promise.resolve()).then(() => {\n        return results;\n    });\n}"],"sourceRoot":".."}