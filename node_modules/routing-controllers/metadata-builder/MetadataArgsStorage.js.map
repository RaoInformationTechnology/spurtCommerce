{"version":3,"sources":["../../src/metadata-builder/MetadataArgsStorage.ts"],"names":[],"mappings":"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","file":"MetadataArgsStorage.js","sourcesContent":["import {ControllerMetadataArgs} from \"../metadata/args/ControllerMetadataArgs\";\nimport {ActionMetadataArgs} from \"../metadata/args/ActionMetadataArgs\";\nimport {ParamMetadataArgs} from \"../metadata/args/ParamMetadataArgs\";\nimport {ResponseHandlerMetadataArgs} from \"../metadata/args/ResponseHandleMetadataArgs\";\nimport {MiddlewareMetadataArgs} from \"../metadata/args/MiddlewareMetadataArgs\";\nimport {UseMetadataArgs} from \"../metadata/args/UseMetadataArgs\";\nimport {UseInterceptorMetadataArgs} from \"../metadata/args/UseInterceptorMetadataArgs\";\nimport {InterceptorMetadataArgs} from \"../metadata/args/InterceptorMetadataArgs\";\n\n/**\n * Storage all metadatas read from decorators.\n */\nexport class MetadataArgsStorage {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Registered controller metadata args.\n     */\n    controllers: ControllerMetadataArgs[] = [];\n\n    /**\n     * Registered middleware metadata args.\n     */\n    middlewares: MiddlewareMetadataArgs[] = [];\n\n    /**\n     * Registered interceptor metadata args.\n     */\n    interceptors: InterceptorMetadataArgs[] = [];\n\n    /**\n     * Registered \"use middleware\" metadata args.\n     */\n    uses: UseMetadataArgs[] = [];\n\n    /**\n     * Registered \"use interceptor\" metadata args.\n     */\n    useInterceptors: UseInterceptorMetadataArgs[] = [];\n\n    /**\n     * Registered action metadata args.\n     */\n    actions: ActionMetadataArgs[] = [];\n\n    /**\n     * Registered param metadata args.\n     */\n    params: ParamMetadataArgs[] = [];\n\n    /**\n     * Registered response handler metadata args.\n     */\n    responseHandlers: ResponseHandlerMetadataArgs[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Filters registered middlewares by a given classes.\n     */\n    filterMiddlewareMetadatasForClasses(classes: Function[]): MiddlewareMetadataArgs[] {\n        return classes\n            .map(cls => this.middlewares.find(mid => mid.target === cls))\n            .filter(midd => midd !== undefined); // this might be not needed if all classes where decorated with `@Middleware`\n    }\n\n    /**\n     * Filters registered interceptors by a given classes.\n     */\n    filterInterceptorMetadatasForClasses(classes: Function[]): InterceptorMetadataArgs[] {\n        return this.interceptors.filter(ctrl => {\n            return classes.filter(cls => ctrl.target === cls).length > 0;\n        });\n    }\n\n    /**\n     * Filters registered controllers by a given classes.\n     */\n    filterControllerMetadatasForClasses(classes: Function[]): ControllerMetadataArgs[] {\n        return this.controllers.filter(ctrl => {\n            return classes.filter(cls => ctrl.target === cls).length > 0;\n        });\n    }\n\n    /**\n     * Filters registered actions by a given classes.\n     */\n    filterActionsWithTarget(target: Function): ActionMetadataArgs[] {\n        return this.actions.filter(action => action.target === target);\n    }\n\n    /**\n     * Filters registered \"use middlewares\" by a given target class and method name.\n     */\n    filterUsesWithTargetAndMethod(target: Function, methodName: string): UseMetadataArgs[] {\n        return this.uses.filter(use => {\n            return use.target === target && use.method === methodName;\n        });\n    }\n\n    /**\n     * Filters registered \"use interceptors\" by a given target class and method name.\n     */\n    filterInterceptorUsesWithTargetAndMethod(target: Function, methodName: string): UseInterceptorMetadataArgs[] {\n        return this.useInterceptors.filter(use => {\n            return use.target === target && use.method === methodName;\n        });\n    }\n\n    /**\n     * Filters parameters by a given classes.\n     */\n    filterParamsWithTargetAndMethod(target: Function, methodName: string): ParamMetadataArgs[] {\n        return this.params.filter(param => {\n            return param.object.constructor === target && param.method === methodName;\n        });\n    }\n\n    /**\n     * Filters response handlers by a given class.\n     */\n    filterResponseHandlersWithTarget(target: Function): ResponseHandlerMetadataArgs[] {\n        return this.responseHandlers.filter(property => {\n            return property.target === target;\n        });\n    }\n\n    /**\n     * Filters response handlers by a given classes.\n     */\n    filterResponseHandlersWithTargetAndMethod(target: Function, methodName: string): ResponseHandlerMetadataArgs[] {\n        return this.responseHandlers.filter(property => {\n            return property.target === target && property.method === methodName;\n        });\n    }\n\n    /**\n     * Removes all saved metadata.\n     */\n    reset() {\n        this.controllers = [];\n        this.middlewares = [];\n        this.interceptors = [];\n        this.uses = [];\n        this.useInterceptors = [];\n        this.actions = [];\n        this.params = [];\n        this.responseHandlers = [];\n    }\n\n}"],"sourceRoot":".."}