{"version":3,"sources":["../../src/driver/BaseDriver.ts"],"names":[],"mappings":"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","file":"BaseDriver.js","sourcesContent":["import {ValidatorOptions} from \"class-validator\";\nimport {ClassTransformOptions, classToPlain} from \"class-transformer\";\n\nimport {HttpError} from \"../http-error/HttpError\";\nimport {CurrentUserChecker} from \"../CurrentUserChecker\";\nimport {AuthorizationChecker} from \"../AuthorizationChecker\";\nimport {ActionMetadata} from \"../metadata/ActionMetadata\";\nimport {ParamMetadata} from \"../metadata/ParamMetadata\";\nimport {MiddlewareMetadata} from \"../metadata/MiddlewareMetadata\";\nimport {Action} from \"../Action\";\n\n/**\n * Base driver functionality for all other drivers.\n * Abstract layer to organize controllers integration with different http server implementations.\n */\nexport abstract class BaseDriver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reference to the underlying framework app object.\n     */\n    app: any;\n\n    /**\n     * Indicates if class-transformer should be used or not.\n     */\n    useClassTransformer: boolean;\n\n    /**\n     * Indicates if class-validator should be used or not.\n     */\n    enableValidation: boolean;\n\n    /**\n     * Global class transformer options passed to class-transformer during classToPlain operation.\n     * This operation is being executed when server returns response to user.\n     */\n    classToPlainTransformOptions: ClassTransformOptions;\n\n    /**\n     * Global class-validator options passed during validate operation.\n     */\n    validationOptions: ValidatorOptions;\n    \n    /**\n     * Global class transformer options passed to class-transformer during plainToClass operation.\n     * This operation is being executed when parsing user parameters.\n     */\n    plainToClassTransformOptions: ClassTransformOptions;\n\n    /**\n     * Indicates if default routing-controllers error handler should be used or not.\n     */\n    isDefaultErrorHandlingEnabled: boolean;\n\n    /**\n     * Indicates if routing-controllers should operate in development mode.\n     */\n    developmentMode: boolean;\n\n    /**\n     * Global application prefix.\n     */\n    routePrefix: string = \"\";\n\n    /**\n     * Indicates if cors are enabled.\n     * This requires installation of additional module (cors for express and kcors for koa).\n     */\n    cors?: boolean|Object;\n\n    /**\n     * Map of error overrides.\n     */\n    errorOverridingMap: { [key: string]: any };\n\n    /**\n     * Special function used to check user authorization roles per request.\n     * Must return true or promise with boolean true resolved for authorization to succeed.\n     */\n    authorizationChecker?: AuthorizationChecker;\n\n    /**\n     * Special function used to get currently authorized user.\n     */\n    currentUserChecker?: CurrentUserChecker;\n\n    /**\n     * Initializes the things driver needs before routes and middleware registration.\n     */\n    abstract initialize(): void;\n    \n    /**\n     * Registers given middleware.\n     */\n    abstract registerMiddleware(middleware: MiddlewareMetadata): void;\n\n    /**\n     * Registers action in the driver.\n     */\n    abstract registerAction(action: ActionMetadata, executeCallback: (options: Action) => any): void;\n\n    /**\n     * Registers all routes in the framework.\n     */\n    abstract registerRoutes(): void;\n\n    /**\n     * Gets param from the request.\n     */\n    abstract getParamFromRequest(actionOptions: Action, param: ParamMetadata): any;\n\n    /**\n     * Defines an algorithm of how to handle error during executing controller action.\n     */\n    abstract handleError(error: any, action: ActionMetadata, options: Action): any;\n\n    /**\n     * Defines an algorithm of how to handle success result of executing controller action.\n     */\n    abstract handleSuccess(result: any, action: ActionMetadata, options: Action): void;\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected transformResult(result: any, action: ActionMetadata, options: Action): any {\n        // check if we need to transform result\n        const shouldTransform = (this.useClassTransformer && result != null) // transform only if enabled and value exist\n            && result instanceof Object // don't transform primitive types (string/number/boolean)\n            && !(\n                result instanceof Uint8Array // don't transform binary data\n                ||\n                result.pipe instanceof Function // don't transform streams\n            );\n            \n        // transform result if needed\n        if (shouldTransform) {\n            const options = action.responseClassTransformOptions || this.classToPlainTransformOptions;\n            result = classToPlain(result, options);\n        }\n\n        return result;\n    }\n\n    protected processJsonError(error: any) {\n        if (!this.isDefaultErrorHandlingEnabled)\n            return error;\n\n        if (typeof error.toJSON === \"function\")\n            return error.toJSON();\n        \n        let processedError: any = {};\n        if (error instanceof Error) {\n            const name = error.name && error.name !== \"Error\" ? error.name : error.constructor.name;\n            processedError.name = name;\n\n            if (error.message)\n                processedError.message = error.message;\n            if (error.stack && this.developmentMode)\n                processedError.stack = error.stack;\n\n            Object.keys(error)\n                .filter(key => key !== \"stack\" && key !== \"name\" && key !== \"message\" && (!(error instanceof HttpError) || key !== \"httpCode\"))\n                .forEach(key => processedError[key] = (error as any)[key]);\n\n            if (this.errorOverridingMap)\n                Object.keys(this.errorOverridingMap)\n                    .filter(key => name === key)\n                    .forEach(key => processedError = this.merge(processedError, this.errorOverridingMap[key]));\n\n            return Object.keys(processedError).length > 0 ? processedError : undefined;\n        }\n\n        return error;\n    }\n\n    protected processTextError(error: any) {\n        if (!this.isDefaultErrorHandlingEnabled)\n            return error;\n\n        if (error instanceof Error) {\n            if (this.developmentMode && error.stack) {\n                return error.stack;\n\n            } else if (error.message) {\n                return error.message;\n            }\n        }\n        return error;\n    }\n\n    protected merge(obj1: any, obj2: any): any {\n        const result: any = {};\n        for (let i in obj1) {\n            if ((i in obj2) && (typeof obj1[i] === \"object\") && (i !== null)) {\n                result[i] = this.merge(obj1[i], obj2[i]);\n            } else {\n                result[i] = obj1[i];\n            }\n        }\n        for (let i in obj2) {\n            result[i] = obj2[i];\n        }\n        return result;\n    }\n\n}\n"],"sourceRoot":".."}