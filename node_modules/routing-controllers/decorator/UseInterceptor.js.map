{"version":3,"sources":["../../src/decorator/UseInterceptor.ts"],"names":[],"mappings":";;AAAA,kCAAgD;AAehD;;;GAGG;AACH;IAA+B,sBAAuE;SAAvE,UAAuE,EAAvE,qBAAuE,EAAvE,IAAuE;QAAvE,iCAAuE;;IAClG,MAAM,CAAC,UAAU,gBAAiC,EAAE,UAAmB;QACnE,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;YAC5B,8BAAsB,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;gBAC1C,WAAW,EAAE,WAAW;gBACxB,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC,gBAA4B;gBAChF,MAAM,EAAE,UAAU;aACrB,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAVD,wCAUC","file":"UseInterceptor.js","sourcesContent":["import {getMetadataArgsStorage} from \"../index\";\nimport {Action} from \"../Action\";\n\n/**\n * Specifies a given interceptor middleware or interceptor function to be used for controller or controller action.\n * Must be set to controller action or controller class.\n */\nexport function UseInterceptor(...interceptors: Array<Function>): Function;\n\n/**\n * Specifies a given interceptor middleware or interceptor function to be used for controller or controller action.\n * Must be set to controller action or controller class.\n */\nexport function UseInterceptor(...interceptors: Array<(action: Action, result: any) => any>): Function;\n\n/**\n * Specifies a given interceptor middleware or interceptor function to be used for controller or controller action.\n * Must be set to controller action or controller class.\n */\nexport function UseInterceptor(...interceptors: Array<Function|((action: Action, result: any) => any)>): Function {\n    return function (objectOrFunction: Object|Function, methodName?: string) {\n        interceptors.forEach(interceptor => {\n            getMetadataArgsStorage().useInterceptors.push({\n                interceptor: interceptor,\n                target: methodName ? objectOrFunction.constructor : objectOrFunction as Function,\n                method: methodName,\n            });\n        });\n    };\n}\n"],"sourceRoot":".."}